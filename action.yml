name: "Gemini PR Review Action"
description: "Generates PR reviews using Gemini API"

inputs:
  pr-title:
    description: "Title of the PR"
    required: true
  pr-body:
    description: "Body of the PR"
    required: true
  base-sha:
    description: "Base commit SHA"
    required: true
  head-sha:
    description: "Head commit SHA"
    required: true
  review-prompt:
    description: "Review prompt template"
    required: true
  review-diff-limit:
    description: "Character limit for the diff"
    required: false
    default: "60000"
  gemini-api-key:
    description: "Gemini API key"
    required: true

runs:
  using: "composite"
  steps:
    - name: Debug Inputs
      shell: bash
      run: |
        echo "=== DEBUG: Raw Inputs ==="
        echo "PR Title: ${{ inputs.pr-title }}"
        echo "PR Body: ${{ inputs.pr-body }}"
        echo "Base SHA: ${{ inputs.base-sha }}"
        echo "Head SHA: ${{ inputs.head-sha }}"
        echo "Review Prompt: ${{ inputs.review-prompt }}"
        echo "Diff Limit: ${{ inputs.review-diff-limit }}"

    - name: Get Changed Files and Diff
      id: get-diff
      shell: bash
      env:
        BASE_SHA: ${{ inputs.base-sha }}
        HEAD_SHA: ${{ inputs.head-sha }}
        PR_TITLE: ${{ inputs.pr-title }}
        PR_BODY: ${{ inputs.pr-body }}
        REVIEW_PROMPT: ${{ inputs.review-prompt }}
        REVIEW_DIFF_LIMIT: ${{ inputs.review-diff-limit }}
      run: |
        set -euo pipefail

        echo "=== DEBUG: Git log HEAD ==="
        git log -1 --oneline

        echo "=== DEBUG: Checking SHAs ==="
        echo "BASE_SHA=$BASE_SHA"
        echo "HEAD_SHA=$HEAD_SHA"

        if [ -z "$BASE_SHA" ] || [ -z "$HEAD_SHA" ]; then
          echo "ERROR: Missing base or head SHA"
          exit 1
        fi

        echo "=== DEBUG: Getting Changed Files ==="
        CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | tr '\n' ' ')
        echo "Changed Files: $CHANGED_FILES"

        echo "=== DEBUG: Getting Diff Content ==="
        DIFF_CONTENT=$(git diff --unified=3 "$BASE_SHA" "$HEAD_SHA" | head -c "$REVIEW_DIFF_LIMIT")
        echo "Diff Content Preview (first 20 lines):"
        echo "$DIFF_CONTENT" | head -n 20
        echo "--- (end of preview) ---"

        echo "=== DEBUG: Building Final Prompt ==="
        FULL_PROMPT="$REVIEW_PROMPT"
        FULL_PROMPT="${FULL_PROMPT//\{\{ pr_title \}\}/$PR_TITLE}"
        FULL_PROMPT="${FULL_PROMPT//\{\{ pr_body \}\}/$PR_BODY}"
        FULL_PROMPT="${FULL_PROMPT//\{\{ changed_files \}\}/$CHANGED_FILES}"
        FULL_PROMPT="${FULL_PROMPT//\{\{ diff_content \}\}/$DIFF_CONTENT}"

        echo "$FULL_PROMPT" > /tmp/final_prompt.txt
        echo "files_list=${CHANGED_FILES}" >> $GITHUB_OUTPUT

        echo "=== DEBUG: Final Prompt Preview (first 40 lines) ==="
        head -n 40 /tmp/final_prompt.txt
        echo "--- (end of preview) ---"

    - name: Call Gemini API
      id: call-gemini
      shell: bash
      env:
        GEMINI_API_KEY: ${{ inputs.gemini-api-key }}
      run: |
        set -euo pipefail

        if [ ! -s /tmp/final_prompt.txt ]; then
          echo "ERROR: Prompt file is empty or missing"
          exit 1
        fi

        echo "=== DEBUG: Sending Request to Gemini API ==="
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" \
          -H "Content-Type: application/json" \
          -d @<(jq -n --arg prompt "$(cat /tmp/final_prompt.txt)" '{contents:[{parts:[{text:$prompt}]}]}'))

        BODY=$(echo "$RESPONSE" | head -n -1)
        STATUS=$(echo "$RESPONSE" | tail -n1)

        echo "=== DEBUG: Gemini API Response Status ==="
        echo "$STATUS"
        echo "=== DEBUG: Gemini API Response Body (first 40 lines) ==="
        echo "$BODY" | head -n 40
        echo "--- (end of preview) ---"

        if [ "$STATUS" -ne 200 ]; then
          REVIEW="❌ Gemini API call failed with status $STATUS\n\nResponse Preview:\n\`\`\`\n$(echo "$BODY" | head -n 40)\n\`\`\`"
        else
          REVIEW=$(echo "$BODY" | jq -r '.candidates[0].content.parts[0].text // empty')
          if [ -z "$REVIEW" ]; then
            REVIEW="⚠ Gemini returned no review text.\n\nPossible causes:\n- Diff was empty or exceeded limit\n- Invalid prompt formatting\n- Gemini service gave no output\n\nPlease check workflow logs."
          fi
        fi

        echo "review<<EOF" >> $GITHUB_OUTPUT
        echo "$REVIEW" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
