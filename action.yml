# action.yml
name: 'Gemini AI PR Review'
description: 'A reusable GitHub Action for automated PR reviews using the Gemini API.'

inputs:
  gemini-api-key:
    description: 'The Gemini API key to authenticate with the API.'
    required: true
  review-diff-limit:
    description: 'The maximum character count for the diff content to be sent to Gemini.'
    required: false
    default: '8000'
  review-prompt:
    description: 'The custom prompt for the Gemini AI reviewer.'
    required: false
    default: |
      You are an expert code reviewer. Please review the following pull request changes and provide a detailed analysis. Your review should be constructive and specific, and formatted in markdown.

      Provide the following sections:
      1. **Code Quality Assessment**: Rate the overall code quality (1-10) and explain your reasoning.
      2. **Security Analysis**: Identify any potential security vulnerabilities or concerns.
      3. **Performance Review**: Comment on performance implications of the changes.
      4. **Best Practices**: Note any deviations from coding best practices and provide suggestions.
      5. **Suggestions**: Provide specific, actionable improvement suggestions.
      6. **Resources**: Include relevant documentation links or learning resources when applicable.

      **Pull Request Title**: {{ pr_title }}
      **Pull Request Description**: {{ pr_body }}
      **Changed Files**: {{ changed_files }}

      **Code Changes**:
      ```diff
      {{ diff_content }}
      ```
  base-sha:
    description: 'The base commit SHA for the diff.'
    required: true
  head-sha:
    description: 'The head commit SHA for the diff.'
    required: true
  pr-title:
    description: 'The pull request title.'
    required: true
  pr-body:
    description: 'The pull request body.'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Get Changed Files and Diff
      id: get-diff
      shell: bash
      run: |
        # Get list of changed files using the new inputs
        CHANGED_FILES=$(git diff --name-only ${{ inputs.base-sha }} ${{ inputs.head-sha }} | tr '\n' ' ')
        
        # Get the diff content, respecting the size limit
        DIFF_CONTENT=$(git diff --unified=3 ${{ inputs.base-sha }} ${{ inputs.head-sha }} | head -c ${{ inputs.review-diff-limit }})
        
        # Use simple string replacement for placeholders
        FULL_PROMPT="${{ inputs.review-prompt }}"
        FULL_PROMPT="${FULL_PROMPT/\{\{ pr_title \}\}/${{ inputs.pr-title }}}"
        FULL_PROMPT="${FULL_PROMPT/\{\{ pr_body \}\}/${{ inputs.pr-body }}}"
        FULL_PROMPT="${FULL_PROMPT/\{\{ changed_files \}\}/$CHANGED_FILES}"
        FULL_PROMPT="${FULL_PROMPT/\{\{ diff_content \}\}/$DIFF_CONTENT}"

        # Pass the final prompt to the next step
        echo "final_prompt<<EOF" >> $GITHUB_ENV
        echo "$FULL_PROMPT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "files_list=${CHANGED_FILES}" >> $GITHUB_OUTPUT

    - name: Call Gemini API
      id: gemini-api
      shell: bash
      run: |
        echo "Making API call to Gemini..."
        
        # Create JSON payload using jq for proper escaping
        jq -n \
          --arg prompt "$final_prompt" \
          '{
            "contents": [{
              "parts": [{
                "text": $prompt
              }]
            }],
            "generationConfig": {
              "temperature": 0.1,
              "maxOutputTokens": 2048
            }
          }' > /tmp/payload.json

        RESPONSE=$(curl -s -X POST \
          "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${{ inputs.gemini-api-key }}" \
          -H "Content-Type: application/json" \
          -d @/tmp/payload.json)

        echo "API Response received"
        
        # Check if response contains error
        if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
          echo "API Error: $(echo "$RESPONSE" | jq -r '.error.message')"
          REVIEW_TEXT="‚ùå Failed to generate AI review: $(echo "$RESPONSE" | jq -r '.error.message // "Unknown API error"')"
        else
          # Extract review text from JSON response
          REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Failed to generate review"')
        fi

        # Store review content for next step
        echo "review_content<<EOF" >> $GITHUB_OUTPUT
        echo "$REVIEW_TEXT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post Review Comment
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const reviewContent = `${{ steps.gemini-api.outputs.review_content }}`;
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ü§ñ Gemini AI Code Review\n\n${reviewContent}\n\n---\n*This review was automatically generated by Gemini AI. Please consider this feedback alongside human review.*`
          });

    - name: Add 'ai-reviewed' Label
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          await github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['ai-reviewed']
          });